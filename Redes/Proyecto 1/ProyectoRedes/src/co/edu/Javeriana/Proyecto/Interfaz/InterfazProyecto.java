/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.Javeriana.Proyecto.Interfaz;

import co.edu.javeriana.Proyecto.Utils.ByteString;
import java.io.IOException;
import java.math.BigInteger;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import jpcap.JpcapCaptor;
import jpcap.JpcapSender;
import jpcap.NetworkInterface;
import jpcap.NetworkInterfaceAddress;
import jpcap.packet.ARPPacket;
import jpcap.packet.EthernetPacket;
import jpcap.packet.ICMPPacket;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;

/**
 *
 * @author mcdrak
 */
public class InterfazProyecto extends JFrame {
    
    private int indexDevice;
    
    private static NetworkInterface device;

    /**
     * Creates new form InterfazProyecto
     */
    public InterfazProyecto() {
        initComponents();
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
        jPanel3.setVisible(false);
        indexDevice = -1;
        device = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtIpOrigICMP = new javax.swing.JTextField();
        txtIpDestICMP = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtTamICMP = new javax.swing.JTextField();
        btnEnviarICMP = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtHardTypeARP = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtProtoTypeARP = new javax.swing.JTextField();
        txtHardSizeARP = new javax.swing.JTextField();
        txtProtoSizeARP = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtOpARP = new javax.swing.JTextField();
        Sender = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtMacOrigARP = new javax.swing.JTextField();
        txtIpOrigARP = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtMacDestARP = new javax.swing.JTextField();
        txtIpDestARP = new javax.swing.JTextField();
        btnEnviarARP = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        txtMacDestino = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMacOrigen = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtEtherType = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ethernet II");

        jLabel2.setText("IP origen");

        jLabel20.setText("IP destino");

        txtIpDestICMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIpDestICMPActionPerformed(evt);
            }
        });

        jLabel21.setText("Tama√±o del campo de datos");

        btnEnviarICMP.setText("Enviar ICMP");
        btnEnviarICMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarICMPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtIpOrigICMP, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIpDestICMP, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(79, 79, 79)
                        .addComponent(jLabel20))
                    .addComponent(jLabel21)
                    .addComponent(txtTamICMP, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(btnEnviarICMP)
                .addGap(58, 58, 58))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIpOrigICMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIpDestICMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTamICMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviarICMP))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        btnEnviarICMP.getAccessibleContext().setAccessibleName("btnEnviarICMP");
        btnEnviarICMP.getAccessibleContext().setAccessibleDescription("");

        jLabel3.setText("Hardware Type");

        jLabel7.setText("Protocol Type");

        jLabel8.setText("Hardware size");

        jLabel9.setText("Protocol size");

        jLabel10.setText("Op. Code");

        Sender.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel11.setText("Sender");

        jLabel13.setText("MAC:");

        jLabel14.setText("IP:");

        txtIpOrigARP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIpOrigARPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SenderLayout = new javax.swing.GroupLayout(Sender);
        Sender.setLayout(SenderLayout);
        SenderLayout.setHorizontalGroup(
            SenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SenderLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 220, Short.MAX_VALUE))
            .addGroup(SenderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMacOrigARP)
                    .addComponent(txtIpOrigARP, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SenderLayout.setVerticalGroup(
            SenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SenderLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtMacOrigARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(SenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtIpOrigARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel12.setText("Target");

        jLabel17.setText("MAC:");

        jLabel18.setText("IP:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMacDestARP)
                    .addComponent(txtIpDestARP, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtMacDestARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtIpDestARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnEnviarARP.setLabel("Enviar ARP");
        btnEnviarARP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarARPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Sender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtHardTypeARP)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtProtoTypeARP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtHardSizeARP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtProtoSizeARP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOpARP, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEnviarARP)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHardTypeARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProtoTypeARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHardSizeARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProtoSizeARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOpARP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Sender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEnviarARP)
                .addContainerGap())
        );

        btnEnviarARP.getAccessibleContext().setAccessibleName("btnEnviarARP");

        jButton1.setText("ICMP");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ARP");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("MAC Destino");

        txtMacOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMacOrigenActionPerformed(evt);
            }
        });

        jLabel4.setText("MAC Origen");

        jLabel6.setText("Tipo Trama");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtMacOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtMacDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtEtherType, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMacDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEtherType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMacOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(0, 570, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton3.setText("Seleccionar Tarjeta de red");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(device != null)
        {
            jPanel2.setVisible(true);
            jPanel3.setVisible(false);
            
            txtEtherType.setText(EthernetPacket.ETHERTYPE_IP + "");
            
            InetAddress ipO = null;
            for(NetworkInterfaceAddress addr:device.addresses)
            {
                if(addr.address instanceof Inet4Address)
                {
                    ipO = addr.address;
                    break;
		}
            }
            txtIpOrigICMP.setText(ipO.getHostName());
            
            txtIpDestICMP.setText("Ponga aca la ip de destino");
            
            txtTamICMP.setText("1472");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado tarjeta de red", "Error de tarjeta de red", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(device != null)
        {
            jPanel2.setVisible(false);
            jPanel3.setVisible(true);
            
            txtEtherType.setText(EthernetPacket.ETHERTYPE_ARP + "");
            
            txtHardTypeARP.setText(ARPPacket.HARDTYPE_ETHER + "");
            txtProtoTypeARP.setText(ARPPacket.PROTOTYPE_IP + "");
            txtHardSizeARP.setText(6 + "");
            txtProtoSizeARP.setText(4 + "");
            txtOpARP.setText(ARPPacket.ARP_REQUEST + "");
            
            txtMacOrigARP.setText(ByteString.ByteArrayToHexString(device.mac_address));
            
            InetAddress ipO = null;
            for(NetworkInterfaceAddress addr:device.addresses)
            {
                if(addr.address instanceof Inet4Address)
                {
                    ipO = addr.address;
                    break;
		}
            }
            txtIpOrigARP.setText(ipO.getHostAddress());
            
            txtMacDestARP.setText("FFFFFFFFFFFF");
            txtIpDestARP.setText("Ponga la ip deseada");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado tarjeta de red", "Error de tarjeta de red", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtMacOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMacOrigenActionPerformed

    }//GEN-LAST:event_txtMacOrigenActionPerformed

    private void txtIpDestICMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIpDestICMPActionPerformed

    }//GEN-LAST:event_txtIpDestICMPActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int ind = -1;
        SeleccionarTarjeta se = new SeleccionarTarjeta();
        
        int result = JOptionPane.showConfirmDialog(null, se, "Seleccion Tarjeta de Red", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        
        if(result == JOptionPane.OK_OPTION)
        {
            ind = se.getIndex();
            
            if(ind != -1)
            {
                indexDevice = ind;
                device = JpcapCaptor.getDeviceList()[indexDevice];
            }
        }
        
        if(device != null)
        {
            txtMacOrigen.setText(ByteString.ByteArrayToHexString(device.mac_address));
            txtMacDestino.setText("FFFFFFFFFFFF");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnEnviarICMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarICMPActionPerformed
        if(indexDevice == -1)
        {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado tarjeta de red", "Error de tarjeta de red", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            if(device != null)
            {
                try 
                {
                    // CAMPOS ICMP
                    String ipOrig = txtIpOrigICMP.getText();
                    InetAddress org=InetAddress.getByName(ipOrig);
                    
                    String ipDest = txtIpDestICMP.getText();
                    InetAddress des=InetAddress.getByName(ipDest);
                    
                    String tamCD = txtTamICMP.getText();
                    int tam=Integer.parseInt(tamCD);
                    
                    String frameType = txtEtherType.getText();
                    
                    
                    // CAMPOS ETHERNET
                    String macOrig = txtMacOrigen.getText();
                    String macDest = txtMacDestino.getText();
                
                    //Llamar metodo icmp
                    if(tam <= 1472)
                    {
                        enviarPaqueteIMCP(org,des,tam,macOrig, macDest, frameType);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "El tama√±o excede su valor maximo", "Error Tama√±o", JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch (IOException ex)
                {
                    Logger.getLogger(InterfazProyecto.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnEnviarICMPActionPerformed

    private void btnEnviarARPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarARPActionPerformed
        if(indexDevice == -1)
        {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado tarjeta de red", "Error de tarjeta de red", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            if(device != null)
            {
                 new Thread(new Runnable()
                {
                    public void run()
                    {
                        try
                        {
                            JpcapCaptor captor = JpcapCaptor.openDevice(device, 2000, false, 3000);

                            InetAddress ipO = null;
                            for(NetworkInterfaceAddress addr:device.addresses)
                            {
                                if(addr.address instanceof Inet4Address)
                                {
                                    ipO = addr.address;
                                    break;
                                }
                            }

                            while(true)
                            {
                                Packet p = captor.getPacket();
                                if(p instanceof ARPPacket)
                                {
                                    if(Arrays.equals(((ARPPacket) p).target_protoaddr, ipO.getAddress()))
                                    {
                                        JOptionPane.showMessageDialog(null, "La mac encontrada es " + ByteString.ByteArrayToHexString(((ARPPacket) p).sender_hardaddr), "Encontro ARP", JOptionPane.INFORMATION_MESSAGE);
                                        break;
                                    }
                                }
                            }
                        } 
                        catch (IOException ex) 
                        {
                            Logger.getLogger(InterfazProyecto.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }).start();
                 
                // CAMPOS ARP
                String hardType = txtHardTypeARP.getText();
                String protoType = txtProtoTypeARP.getText();
                String hardSize = txtHardSizeARP.getText();
                String protoSize = txtProtoSizeARP.getText();
                String opCode = txtOpARP.getText();
                String macOrig = txtMacOrigARP.getText();
                String ipOrig = txtIpOrigARP.getText();
                String macDest = txtMacDestARP.getText();
                String ipDest = txtIpDestARP.getText();

                // CAMPOS ETHERNET
                String macOrigEth = txtMacOrigen.getText();
                String macDestEth = txtMacDestino.getText();

                try 
                {
                    envioPaqueteARP(hardType, protoType, hardSize, protoSize, opCode, macOrig, ipOrig, macDest, ipDest, macOrigEth, macDestEth);
                } 
                catch (IOException ex) 
                {
                    System.out.println("Error en arp");;
                }
            }
        }
    }//GEN-LAST:event_btnEnviarARPActionPerformed

    private void txtIpOrigARPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIpOrigARPActionPerformed

    }//GEN-LAST:event_txtIpOrigARPActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazProyecto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazProyecto().setVisible(true);
            }
        });
    }
    
    public static void envioPaqueteARP(String hardType, String protoType, String hardSize, String protoSize, String opCode, String macOrig, String ipOrig, String macDest, String ipDest, String macOrigEth, String macDestEth) throws IOException
    {
        boolean flag = true;
        
        InetAddress ipO = null;
        InetAddress ipD = null;
        
        byte[] macO = new byte[6];
        byte[] macD = new byte[6];
        byte[] macOE = new byte[6];
        byte[] macDE = new byte[6];
        
        short hT = Short.parseShort(hardType);
        short pT = Short.parseShort(protoType);
        short hL = Short.parseShort(hardSize);
        short pL = Short.parseShort(protoSize);
        short op = Short.parseShort(opCode);
        
        if(macDest.length() == 12 && macOrig.length() == 12 && macOrigEth.length() == 12 && macDestEth.length() == 12 && ipOrig.contains(".") == true && ipDest.contains(".") == true && hT == ARPPacket.HARDTYPE_ETHER && pT == ARPPacket.PROTOTYPE_IP && hL == 6 && pL == 4 && op == ARPPacket.ARP_REQUEST)
        {
            macO = ByteString.HexStringToByteArray(macOrig);
            macD = ByteString.HexStringToByteArray(macDest);
            macOE = ByteString.HexStringToByteArray(macOrigEth);
            macDE = ByteString.HexStringToByteArray(macDestEth);
            
            ipO = InetAddress.getByName(ipOrig);
            ipD = InetAddress.getByName(ipDest);
        }
        else
        {
            flag = false;
        }
        
        if(flag == true)
        {
            ARPPacket arp = new ARPPacket();
            
            arp.hardtype = hT;
            arp.prototype = pT;
            arp.operation = op;
            arp.hlen = hL;
            arp.plen = pL;
            
            arp.sender_hardaddr = macO;
            arp.sender_protoaddr = ipO.getAddress();
            
            arp.target_hardaddr = macD;
            arp.target_protoaddr = ipD.getAddress();
            
            EthernetPacket ether = new EthernetPacket();
            ether.frametype = EthernetPacket.ETHERTYPE_ARP;
            ether.src_mac = macOE;
            ether.dst_mac = macDE;
            
            arp.datalink = ether;
            
            JpcapSender sender = JpcapSender.openDevice(device);
            
            sender.sendPacket(arp);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Algun campo rellenado es invalido", "Error campos invalidos", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static void enviarPaqueteIMCP(InetAddress origen,InetAddress destino,int tamano,String macorg,String macdest, String frameType)
    {
        try 
        {
            ICMPPacket icmp = new ICMPPacket();
            
            icmp.type = ICMPPacket.ICMP_ECHO;
            icmp.seq = 100;
            icmp.id = 0;
            icmp.setIPv4Parameter(0,false,false,false,0,false,false,false,0,0,0,IPPacket.IPPROTO_ICMP,origen,destino);
            
            byte[] myData = new byte[tamano];
            for (int i = 0; i <tamano; i++)
            {
                myData[i] = (byte) 00;
            }
            icmp.data = myData;
            
            EthernetPacket ether = new EthernetPacket();
            
            ether.frametype = Short.parseShort(frameType);

            byte[] parsed = ByteString.HexStringToByteArray(macorg);
            ether.src_mac = parsed;
            
            byte[] parsed2 = ByteString.HexStringToByteArray(macdest);
            ether.dst_mac = parsed2;
            
            icmp.datalink = ether;
            
            JpcapSender sender = JpcapSender.openDevice(device);

            if(icmp != null)
            {
                for (int i = 0; i < 10; i++)
                {
                    sender.sendPacket(icmp);
                    i++;
                }
            }
        }
        catch (IOException ex) 
        {
            Logger.getLogger(InterfazProyecto.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Sender;
    private javax.swing.JButton btnEnviarARP;
    private javax.swing.JButton btnEnviarICMP;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField txtEtherType;
    private javax.swing.JTextField txtHardSizeARP;
    private javax.swing.JTextField txtHardTypeARP;
    private javax.swing.JTextField txtIpDestARP;
    private javax.swing.JTextField txtIpDestICMP;
    private javax.swing.JTextField txtIpOrigARP;
    private javax.swing.JTextField txtIpOrigICMP;
    private javax.swing.JTextField txtMacDestARP;
    private javax.swing.JTextField txtMacDestino;
    private javax.swing.JTextField txtMacOrigARP;
    private javax.swing.JTextField txtMacOrigen;
    private javax.swing.JTextField txtOpARP;
    private javax.swing.JTextField txtProtoSizeARP;
    private javax.swing.JTextField txtProtoTypeARP;
    private javax.swing.JTextField txtTamICMP;
    // End of variables declaration//GEN-END:variables
}
